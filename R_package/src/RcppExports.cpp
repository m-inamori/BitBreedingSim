// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// createBaseInfoCpp
SEXP createBaseInfoCpp(Rcpp::List pos, double cM, int seed);
RcppExport SEXP _BitBreedingSim_createBaseInfoCpp(SEXP posSEXP, SEXP cMSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type cM(cMSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(createBaseInfoCpp(pos, cM, seed));
    return rcpp_result_gen;
END_RCPP
}
// createBaseInfoWithMap
SEXP createBaseInfoWithMap(Rcpp::List pos, Rcpp::List chrom_maps, int seed);
RcppExport SEXP _BitBreedingSim_createBaseInfoWithMap(SEXP posSEXP, SEXP chrom_mapsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pos(posSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type chrom_maps(chrom_mapsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(createBaseInfoWithMap(pos, chrom_maps, seed));
    return rcpp_result_gen;
END_RCPP
}
// getNumChroms
int getNumChroms(SEXP ptr);
RcppExport SEXP _BitBreedingSim_getNumChroms(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumChroms(ptr));
    return rcpp_result_gen;
END_RCPP
}
// getNumTraits
int getNumTraits(SEXP ptr);
RcppExport SEXP _BitBreedingSim_getNumTraits(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumTraits(ptr));
    return rcpp_result_gen;
END_RCPP
}
// getNumAllMarkers
int getNumAllMarkers(SEXP ptr);
RcppExport SEXP _BitBreedingSim_getNumAllMarkers(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumAllMarkers(ptr));
    return rcpp_result_gen;
END_RCPP
}
// getNumMarkers
int getNumMarkers(SEXP ptr, std::size_t i);
RcppExport SEXP _BitBreedingSim_getNumMarkers(SEXP ptrSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumMarkers(ptr, i));
    return rcpp_result_gen;
END_RCPP
}
// getTraitCpp
SEXP getTraitCpp(SEXP baseInfoPtr, std::size_t i);
RcppExport SEXP _BitBreedingSim_getTraitCpp(SEXP baseInfoPtrSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type baseInfoPtr(baseInfoPtrSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(getTraitCpp(baseInfoPtr, i));
    return rcpp_result_gen;
END_RCPP
}
// getMapfromInfo
List getMapfromInfo(SEXP baseInfoPtr);
RcppExport SEXP _BitBreedingSim_getMapfromInfo(SEXP baseInfoPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type baseInfoPtr(baseInfoPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(getMapfromInfo(baseInfoPtr));
    return rcpp_result_gen;
END_RCPP
}
// add_Trait_A_wrapper
void add_Trait_A_wrapper(SEXP ptr, std::string name, double mean, double h2, Nullable<double> sd_, Nullable<NumericVector> a, Nullable<List> loci, size_t num_loci);
RcppExport SEXP _BitBreedingSim_add_Trait_A_wrapper(SEXP ptrSEXP, SEXP nameSEXP, SEXP meanSEXP, SEXP h2SEXP, SEXP sd_SEXP, SEXP aSEXP, SEXP lociSEXP, SEXP num_lociSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type sd_(sd_SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type loci(lociSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_loci(num_lociSEXP);
    add_Trait_A_wrapper(ptr, name, mean, h2, sd_, a, loci, num_loci);
    return R_NilValue;
END_RCPP
}
// add_Trait_AD_wrapper
void add_Trait_AD_wrapper(SEXP baseInfoPtr, std::string name, double mean, Nullable<double> sd_, Nullable<double> h2_, Nullable<double> H2_, Nullable<NumericVector> a, Nullable<NumericVector> ds, Nullable<List> loci, std::size_t num_loci);
RcppExport SEXP _BitBreedingSim_add_Trait_AD_wrapper(SEXP baseInfoPtrSEXP, SEXP nameSEXP, SEXP meanSEXP, SEXP sd_SEXP, SEXP h2_SEXP, SEXP H2_SEXP, SEXP aSEXP, SEXP dsSEXP, SEXP lociSEXP, SEXP num_lociSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type baseInfoPtr(baseInfoPtrSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type sd_(sd_SEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type h2_(h2_SEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type H2_(H2_SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type loci(lociSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type num_loci(num_lociSEXP);
    add_Trait_AD_wrapper(baseInfoPtr, name, mean, sd_, h2_, H2_, a, ds, loci, num_loci);
    return R_NilValue;
END_RCPP
}
// getMapInfo
SEXP getMapInfo(SEXP mapPtr);
RcppExport SEXP _BitBreedingSim_getMapInfo(SEXP mapPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mapPtr(mapPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(getMapInfo(mapPtr));
    return rcpp_result_gen;
END_RCPP
}
// getMapCpp
Rcpp::DataFrame getMapCpp(SEXP mapPtr);
RcppExport SEXP _BitBreedingSim_getMapCpp(SEXP mapPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mapPtr(mapPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(getMapCpp(mapPtr));
    return rcpp_result_gen;
END_RCPP
}
// readVCF
SEXP readVCF(const std::string& filename);
RcppExport SEXP _BitBreedingSim_readVCF(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(readVCF(filename));
    return rcpp_result_gen;
END_RCPP
}
// createOrigins
SEXP createOrigins(SEXP num_inds, SEXP info, SEXP name_base);
RcppExport SEXP _BitBreedingSim_createOrigins(SEXP num_indsSEXP, SEXP infoSEXP, SEXP name_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type num_inds(num_indsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type info(infoSEXP);
    Rcpp::traits::input_parameter< SEXP >::type name_base(name_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(createOrigins(num_inds, info, name_base));
    return rcpp_result_gen;
END_RCPP
}
// createInfoAndPopFromVCF
Rcpp::List createInfoAndPopFromVCF(SEXP vcf, SEXP seed);
RcppExport SEXP _BitBreedingSim_createInfoAndPopFromVCF(SEXP vcfSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vcf(vcfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(createInfoAndPopFromVCF(vcf, seed));
    return rcpp_result_gen;
END_RCPP
}
// createPopFromHaploArray
SEXP createPopFromHaploArray(const NumericVector& haploArray, SEXP info);
RcppExport SEXP _BitBreedingSim_createPopFromHaploArray(SEXP haploArraySEXP, SEXP infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type haploArray(haploArraySEXP);
    Rcpp::traits::input_parameter< SEXP >::type info(infoSEXP);
    rcpp_result_gen = Rcpp::wrap(createPopFromHaploArray(haploArray, info));
    return rcpp_result_gen;
END_RCPP
}
// createHaploArrayFromPop
NumericVector createHaploArrayFromPop(SEXP pop_ptr);
RcppExport SEXP _BitBreedingSim_createHaploArrayFromPop(SEXP pop_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop_ptr(pop_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(createHaploArrayFromPop(pop_ptr));
    return rcpp_result_gen;
END_RCPP
}
// crossPopsRandomly
SEXP crossPopsRandomly(SEXP num_inds, SEXP mothers, SEXP fathers, SEXP name_base, Rcpp::CharacterVector names, int T);
RcppExport SEXP _BitBreedingSim_crossPopsRandomly(SEXP num_indsSEXP, SEXP mothersSEXP, SEXP fathersSEXP, SEXP name_baseSEXP, SEXP namesSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type num_inds(num_indsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mothers(mothersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fathers(fathersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type name_base(name_baseSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(crossPopsRandomly(num_inds, mothers, fathers, name_base, names, T));
    return rcpp_result_gen;
END_RCPP
}
// crossPopsByTable
SEXP crossPopsByTable(DataFrame df, SEXP mothers, SEXP fathers, SEXP name_base, int T);
RcppExport SEXP _BitBreedingSim_crossPopsByTable(SEXP dfSEXP, SEXP mothersSEXP, SEXP fathersSEXP, SEXP name_baseSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mothers(mothersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fathers(fathersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type name_base(name_baseSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(crossPopsByTable(df, mothers, fathers, name_base, T));
    return rcpp_result_gen;
END_RCPP
}
// writeVCF
void writeVCF(SEXP pop, const std::string& filename);
RcppExport SEXP _BitBreedingSim_writeVCF(SEXP popSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    writeVCF(pop, filename);
    return R_NilValue;
END_RCPP
}
// getNumInds
int getNumInds(SEXP pop);
RcppExport SEXP _BitBreedingSim_getNumInds(SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumInds(pop));
    return rcpp_result_gen;
END_RCPP
}
// getNumChromsPop
int getNumChromsPop(SEXP pop);
RcppExport SEXP _BitBreedingSim_getNumChromsPop(SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumChromsPop(pop));
    return rcpp_result_gen;
END_RCPP
}
// getPhenotypesCpp
SEXP getPhenotypesCpp(SEXP pop, int i);
RcppExport SEXP _BitBreedingSim_getPhenotypesCpp(SEXP popSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(getPhenotypesCpp(pop, i));
    return rcpp_result_gen;
END_RCPP
}
// selectPop
SEXP selectPop(SEXP pop, NumericVector indices_R);
RcppExport SEXP _BitBreedingSim_selectPop(SEXP popSEXP, SEXP indices_RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type indices_R(indices_RSEXP);
    rcpp_result_gen = Rcpp::wrap(selectPop(pop, indices_R));
    return rcpp_result_gen;
END_RCPP
}
// getGenotypes
NumericMatrix getGenotypes(SEXP pop);
RcppExport SEXP _BitBreedingSim_getGenotypes(SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenotypes(pop));
    return rcpp_result_gen;
END_RCPP
}
// getGenotypes_naive
NumericMatrix getGenotypes_naive(SEXP pop);
RcppExport SEXP _BitBreedingSim_getGenotypes_naive(SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenotypes_naive(pop));
    return rcpp_result_gen;
END_RCPP
}
// getPhasedGenotypes
CharacterMatrix getPhasedGenotypes(SEXP pop);
RcppExport SEXP _BitBreedingSim_getPhasedGenotypes(SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getPhasedGenotypes(pop));
    return rcpp_result_gen;
END_RCPP
}
// getPhasedIntGenotypes
NumericMatrix getPhasedIntGenotypes(SEXP pop);
RcppExport SEXP _BitBreedingSim_getPhasedIntGenotypes(SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getPhasedIntGenotypes(pop));
    return rcpp_result_gen;
END_RCPP
}
// getPopulationInfo
SEXP getPopulationInfo(SEXP pop);
RcppExport SEXP _BitBreedingSim_getPopulationInfo(SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(getPopulationInfo(pop));
    return rcpp_result_gen;
END_RCPP
}
// createNameDataFromPop
Rcpp::DataFrame createNameDataFromPop(SEXP pop);
RcppExport SEXP _BitBreedingSim_createNameDataFromPop(SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(createNameDataFromPop(pop));
    return rcpp_result_gen;
END_RCPP
}
// joinPop
SEXP joinPop(SEXP pop1, SEXP pop2);
RcppExport SEXP _BitBreedingSim_joinPop(SEXP pop1SEXP, SEXP pop2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pop1(pop1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type pop2(pop2SEXP);
    rcpp_result_gen = Rcpp::wrap(joinPop(pop1, pop2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BitBreedingSim_createBaseInfoCpp", (DL_FUNC) &_BitBreedingSim_createBaseInfoCpp, 3},
    {"_BitBreedingSim_createBaseInfoWithMap", (DL_FUNC) &_BitBreedingSim_createBaseInfoWithMap, 3},
    {"_BitBreedingSim_getNumChroms", (DL_FUNC) &_BitBreedingSim_getNumChroms, 1},
    {"_BitBreedingSim_getNumTraits", (DL_FUNC) &_BitBreedingSim_getNumTraits, 1},
    {"_BitBreedingSim_getNumAllMarkers", (DL_FUNC) &_BitBreedingSim_getNumAllMarkers, 1},
    {"_BitBreedingSim_getNumMarkers", (DL_FUNC) &_BitBreedingSim_getNumMarkers, 2},
    {"_BitBreedingSim_getTraitCpp", (DL_FUNC) &_BitBreedingSim_getTraitCpp, 2},
    {"_BitBreedingSim_getMapfromInfo", (DL_FUNC) &_BitBreedingSim_getMapfromInfo, 1},
    {"_BitBreedingSim_add_Trait_A_wrapper", (DL_FUNC) &_BitBreedingSim_add_Trait_A_wrapper, 8},
    {"_BitBreedingSim_add_Trait_AD_wrapper", (DL_FUNC) &_BitBreedingSim_add_Trait_AD_wrapper, 10},
    {"_BitBreedingSim_getMapInfo", (DL_FUNC) &_BitBreedingSim_getMapInfo, 1},
    {"_BitBreedingSim_getMapCpp", (DL_FUNC) &_BitBreedingSim_getMapCpp, 1},
    {"_BitBreedingSim_readVCF", (DL_FUNC) &_BitBreedingSim_readVCF, 1},
    {"_BitBreedingSim_createOrigins", (DL_FUNC) &_BitBreedingSim_createOrigins, 3},
    {"_BitBreedingSim_createInfoAndPopFromVCF", (DL_FUNC) &_BitBreedingSim_createInfoAndPopFromVCF, 2},
    {"_BitBreedingSim_createPopFromHaploArray", (DL_FUNC) &_BitBreedingSim_createPopFromHaploArray, 2},
    {"_BitBreedingSim_createHaploArrayFromPop", (DL_FUNC) &_BitBreedingSim_createHaploArrayFromPop, 1},
    {"_BitBreedingSim_crossPopsRandomly", (DL_FUNC) &_BitBreedingSim_crossPopsRandomly, 6},
    {"_BitBreedingSim_crossPopsByTable", (DL_FUNC) &_BitBreedingSim_crossPopsByTable, 5},
    {"_BitBreedingSim_writeVCF", (DL_FUNC) &_BitBreedingSim_writeVCF, 2},
    {"_BitBreedingSim_getNumInds", (DL_FUNC) &_BitBreedingSim_getNumInds, 1},
    {"_BitBreedingSim_getNumChromsPop", (DL_FUNC) &_BitBreedingSim_getNumChromsPop, 1},
    {"_BitBreedingSim_getPhenotypesCpp", (DL_FUNC) &_BitBreedingSim_getPhenotypesCpp, 2},
    {"_BitBreedingSim_selectPop", (DL_FUNC) &_BitBreedingSim_selectPop, 2},
    {"_BitBreedingSim_getGenotypes", (DL_FUNC) &_BitBreedingSim_getGenotypes, 1},
    {"_BitBreedingSim_getGenotypes_naive", (DL_FUNC) &_BitBreedingSim_getGenotypes_naive, 1},
    {"_BitBreedingSim_getPhasedGenotypes", (DL_FUNC) &_BitBreedingSim_getPhasedGenotypes, 1},
    {"_BitBreedingSim_getPhasedIntGenotypes", (DL_FUNC) &_BitBreedingSim_getPhasedIntGenotypes, 1},
    {"_BitBreedingSim_getPopulationInfo", (DL_FUNC) &_BitBreedingSim_getPopulationInfo, 1},
    {"_BitBreedingSim_createNameDataFromPop", (DL_FUNC) &_BitBreedingSim_createNameDataFromPop, 1},
    {"_BitBreedingSim_joinPop", (DL_FUNC) &_BitBreedingSim_joinPop, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BitBreedingSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
