// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// createBaseInfo
SEXP createBaseInfo(int seed);
RcppExport SEXP _BitBreedingSim_createBaseInfo(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(createBaseInfo(seed));
    return rcpp_result_gen;
END_RCPP
}
// getNumChroms
int getNumChroms(SEXP ptr);
RcppExport SEXP _BitBreedingSim_getNumChroms(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumChroms(ptr));
    return rcpp_result_gen;
END_RCPP
}
// getNumTraits
int getNumTraits(SEXP ptr);
RcppExport SEXP _BitBreedingSim_getNumTraits(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumTraits(ptr));
    return rcpp_result_gen;
END_RCPP
}
// setTrait
void setTrait(SEXP ptr);
RcppExport SEXP _BitBreedingSim_setTrait(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    setTrait(ptr);
    return R_NilValue;
END_RCPP
}
// setTraitADMulti
void setTraitADMulti(SEXP ptr, int num_loci, double h2, double H2);
RcppExport SEXP _BitBreedingSim_setTraitADMulti(SEXP ptrSEXP, SEXP num_lociSEXP, SEXP h2SEXP, SEXP H2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type num_loci(num_lociSEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< double >::type H2(H2SEXP);
    setTraitADMulti(ptr, num_loci, h2, H2);
    return R_NilValue;
END_RCPP
}
// createOrigins
SEXP createOrigins(SEXP num_inds, SEXP info, SEXP name_base);
RcppExport SEXP _BitBreedingSim_createOrigins(SEXP num_indsSEXP, SEXP infoSEXP, SEXP name_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type num_inds(num_indsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type info(infoSEXP);
    Rcpp::traits::input_parameter< SEXP >::type name_base(name_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(createOrigins(num_inds, info, name_base));
    return rcpp_result_gen;
END_RCPP
}
// cross
SEXP cross(SEXP num_inds, SEXP mothers, SEXP fathers, SEXP info, SEXP name_base, int T);
RcppExport SEXP _BitBreedingSim_cross(SEXP num_indsSEXP, SEXP mothersSEXP, SEXP fathersSEXP, SEXP infoSEXP, SEXP name_baseSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type num_inds(num_indsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mothers(mothersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fathers(fathersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type info(infoSEXP);
    Rcpp::traits::input_parameter< SEXP >::type name_base(name_baseSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(cross(num_inds, mothers, fathers, info, name_base, T));
    return rcpp_result_gen;
END_RCPP
}
// getNumInds
int getNumInds(SEXP ptr);
RcppExport SEXP _BitBreedingSim_getNumInds(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getNumInds(ptr));
    return rcpp_result_gen;
END_RCPP
}
// getPopNumChroms
int getPopNumChroms(SEXP ptr);
RcppExport SEXP _BitBreedingSim_getPopNumChroms(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(getPopNumChroms(ptr));
    return rcpp_result_gen;
END_RCPP
}
// getPhenotypes
std::vector<double> getPhenotypes(SEXP population, std::size_t i);
RcppExport SEXP _BitBreedingSim_getPhenotypes(SEXP populationSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type population(populationSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(getPhenotypes(population, i));
    return rcpp_result_gen;
END_RCPP
}
// selectPop
SEXP selectPop(SEXP population, SEXP indices);
RcppExport SEXP _BitBreedingSim_selectPop(SEXP populationSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type population(populationSEXP);
    Rcpp::traits::input_parameter< SEXP >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(selectPop(population, indices));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BitBreedingSim_createBaseInfo", (DL_FUNC) &_BitBreedingSim_createBaseInfo, 1},
    {"_BitBreedingSim_getNumChroms", (DL_FUNC) &_BitBreedingSim_getNumChroms, 1},
    {"_BitBreedingSim_getNumTraits", (DL_FUNC) &_BitBreedingSim_getNumTraits, 1},
    {"_BitBreedingSim_setTrait", (DL_FUNC) &_BitBreedingSim_setTrait, 1},
    {"_BitBreedingSim_setTraitADMulti", (DL_FUNC) &_BitBreedingSim_setTraitADMulti, 4},
    {"_BitBreedingSim_createOrigins", (DL_FUNC) &_BitBreedingSim_createOrigins, 3},
    {"_BitBreedingSim_cross", (DL_FUNC) &_BitBreedingSim_cross, 6},
    {"_BitBreedingSim_getNumInds", (DL_FUNC) &_BitBreedingSim_getNumInds, 1},
    {"_BitBreedingSim_getPopNumChroms", (DL_FUNC) &_BitBreedingSim_getPopNumChroms, 1},
    {"_BitBreedingSim_getPhenotypes", (DL_FUNC) &_BitBreedingSim_getPhenotypes, 2},
    {"_BitBreedingSim_selectPop", (DL_FUNC) &_BitBreedingSim_selectPop, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BitBreedingSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
